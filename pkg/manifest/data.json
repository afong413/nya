{"packages":[["core/cmp","comparison operators","oklab(0.8888888888888888 -0.006484158173042238 0.03568034297613008)","oklab(0.1111111111111111 -0.006484158173042234 0.03568034297613006)"],["bool","boolean operations","oklab(0.8888888888888888 -0.03523795910218803 0.008568396607290652)","oklab(0.1111111111111111 -0.03523795910218801 0.008568396607290647)"],["num/real","real numbers","oklab(0.8888888888888888 -0.010446453138995126 -0.03472755100668754)","oklab(0.1111111111111111 -0.010446453138995119 -0.03472755100668752)"],["geo/point","geometric points","oklab(0.8888888888888888 -0.03458574628904044 -0.0109067564260614)","oklab(0.1111111111111111 -0.03458574628904042 -0.010906756426061393)"],["color/core","color functions core","oklab(0.8888888888888888 0.031027875511145626 -0.018772376604259657)","oklab(0.1111111111111111 0.03102787551114561 -0.018772376604259646)"],["core/ops","basic operators","oklab(0.8888888888888888 0.020570599935878692 -0.029866061012214742)","oklab(0.1111111111111111 0.020570599935878682 -0.029866061012214725)"],["num/complex","complex numbers","oklab(0.8888888888888888 -0.024754542973667696 -0.02650176945549382)","oklab(0.1111111111111111 -0.024754542973667682 -0.026501769455493807)"],["number-theory","number theory","oklab(0.8888888888888888 0.0326331582335967 -0.01581796971195564)","oklab(0.1111111111111111 0.03263315823359668 -0.01581796971195563)"],["text","text","oklab(0.8888888888888888 -0.007286102142977168 -0.03552525717949709)","oklab(0.1111111111111111 -0.007286102142977164 -0.03552525717949707)"],["trig/real","trigonometry","oklab(0.8888888888888888 -0.024058717087575104 0.02713502007014787)","oklab(0.1111111111111111 -0.02405871708757509 0.027135020070147856)"],["3d/point","3D points","oklab(0.8888888888888888 0.0004517403681317501 -0.036261923732023735)","oklab(0.1111111111111111 0.00045174036813174986 -0.036261923732023714)"],["4d/point","4D points","oklab(0.8888888888888888 0.03542865171519167 -0.007742210262641556)","oklab(0.1111111111111111 0.03542865171519165 -0.007742210262641552)"],["base","alternate bases","oklab(0.8888888888888888 -0.001776781109125852 0.03622118483701989)","oklab(0.1111111111111111 -0.001776781109125851 0.03622118483701987)"],["chem/elements","chemical elements","oklab(0.8888888888888888 0.035435858713041266 0.0077091568525152875)","oklab(0.1111111111111111 0.035435858713041245 0.007709156852515283)"],["color/extras","color functions extended","oklab(0.8888888888888888 0.021947123108606057 0.02886962018044221)","oklab(0.1111111111111111 0.021947123108606043 0.02886962018044219)"],["core/fn","functions","oklab(0.8888888888888888 0.03624530353339978 -0.0011870778740348874)","oklab(0.1111111111111111 0.03624530353339976 -0.0011870778740348867)"],["data/distributions","statistical distributions","oklab(0.8888888888888888 -0.017829258399088454 0.03157924519436523)","oklab(0.1111111111111111 -0.017829258399088443 0.03157924519436522)"],["data/list","core list functionality","oklab(0.8888888888888888 -0.014703930213543243 -0.03315004703439433)","oklab(0.1111111111111111 -0.014703930213543234 -0.03315004703439431)"],["data/list-extras","extra list functions","oklab(0.8888888888888888 -0.018164697728310076 0.03138749653200192)","oklab(0.1111111111111111 -0.018164697728310066 0.03138749653200191)"],["data/statistics","statistics","oklab(0.8888888888888888 -0.027654276993259206 0.023460011638688515)","oklab(0.1111111111111111 -0.027654276993259192 0.0234600116386885)"],["data/statistics-complex","complex statistics","oklab(0.8888888888888888 -0.011682162656920757 0.03433159270649342)","oklab(0.1111111111111111 -0.01168216265692075 0.0343315927064934)"],["debug","debug utilities","oklab(0.8888888888888888 0.027165565651507437 0.02402422163028274)","oklab(0.1111111111111111 0.027165565651507424 0.024024221630282727)"],["eval","evaluator","oklab(0.8888888888888888 0.03392093298815266 -0.012825813320041849)","oklab(0.1111111111111111 0.03392093298815264 -0.012825813320041842)"],["factorial","factorial","oklab(0.8888888888888888 -0.029756783989182314 -0.020728361940308963)","oklab(0.1111111111111111 -0.029756783989182297 -0.02072836194030895)"],["geo/dcg","geometry","oklab(0.8888888888888888 0.0028402359298389237 0.03615334344110041)","oklab(0.1111111111111111 0.0028402359298389224 0.03615334344110039)"],["geo/image","image objects","oklab(0.8888888888888888 0.030620380274485416 0.019429963817599104)","oklab(0.1111111111111111 0.0306203802744854 0.01942996381759909)"],["gridlines","gridlines","oklab(0.8888888888888888 -0.02273595548150674 -0.02825256644006434)","oklab(0.1111111111111111 -0.022735955481506726 -0.02825256644006432)"],["image","images","oklab(0.8888888888888888 -0.030243603940362462 0.020011386828648284)","oklab(0.1111111111111111 -0.030243603940362445 0.020011386828648274)"],["item/docs-fn","inline function docs","oklab(0.8888888888888888 -0.014984452805288463 -0.033024193498606275)","oklab(0.1111111111111111 -0.014984452805288455 -0.033024193498606254)"],["item/folder","folders","oklab(0.8888888888888888 -0.022646978290961208 -0.02832393963409818)","oklab(0.1111111111111111 -0.022646978290961194 -0.028323939634098166)"],["item/note","notes","oklab(0.8888888888888888 -0.029444895674881316 0.021169064712515326)","oklab(0.1111111111111111 -0.0294448956748813 0.021169064712515312)"],["iterate","iterate","oklab(0.8888888888888888 0.004696377899069182 0.035959355065635426)","oklab(0.1111111111111111 0.004696377899069179 0.035959355065635405)"],["ithkuil","ithkuil utilities","oklab(0.8888888888888888 0.014847151969235205 -0.03308614907343768)","oklab(0.1111111111111111 0.014847151969235197 -0.03308614907343766)"],["num/quaternion","quaternions","oklab(0.8888888888888888 0.03416650390183778 -0.01215652883157893)","oklab(0.1111111111111111 0.03416650390183776 -0.012156528831578924)"],["number-theory-complex","complex number theory","oklab(0.8888888888888888 0.01801854350553287 0.03147162646013906)","oklab(0.1111111111111111 0.01801854350553286 0.03147162646013904)"],["shader","shaders","oklab(0.8888888888888888 -0.002711959781662066 -0.036163192008587315)","oklab(0.1111111111111111 -0.0027119597816620644 -0.036163192008587294)"],["slider","sliders","oklab(0.8888888888888888 -0.0175767782548081 -0.031720467340324784)","oklab(0.1111111111111111 -0.01757677825480809 -0.031720467340324764)"],["slope-field","slope fields","oklab(0.8888888888888888 -0.03157388151911294 -0.017838755223510534)","oklab(0.1111111111111111 -0.03157388151911292 -0.017838755223510524)"],["special","special functions","oklab(0.8888888888888888 -0.02761231956230181 -0.023509380904154636)","oklab(0.1111111111111111 -0.02761231956230179 -0.023509380904154623)"],["sym/core","symbolics core","oklab(0.8888888888888888 0.02450004749239584 -0.026737218534800027)","oklab(0.1111111111111111 0.024500047492395826 -0.026737218534800013)"],["sym/deriv","derivatives","oklab(0.8888888888888888 -0.033785143364108844 -0.013179350134734185)","oklab(0.1111111111111111 -0.03378514336410883 -0.013179350134734176)"],["sym/extras","extra symbolics","oklab(0.8888888888888888 0.030608961778007857 -0.019447946960534424)","oklab(0.1111111111111111 0.03060896177800784 -0.01944794696053441)"],["trig/complex","complex trig","oklab(0.8888888888888888 0.026777087506969912 0.024456466767531687)","oklab(0.1111111111111111 0.026777087506969898 0.024456466767531673)"],["trig/hyperbolic/real","hyperbolic trigonometry","oklab(0.8888888888888888 -0.0332276949642058 -0.014527610590630466)","oklab(0.1111111111111111 -0.03322769496420578 -0.014527610590630458)"],["trig/hyperbolic/complex","hyperbolic trig (complexes)","oklab(0.8888888888888888 0.036044919860521704 -0.003986845163268072)","oklab(0.1111111111111111 0.03604491986052168 -0.003986845163268069)"],["unit/pkg","units","oklab(0.8888888888888888 0.007283736316937299 -0.03552574231979727)","oklab(0.1111111111111111 0.007283736316937296 -0.03552574231979725)"],["with","with","oklab(0.8888888888888888 -0.03289897490640148 -0.015257412369575382)","oklab(0.1111111111111111 -0.03289897490640146 -0.015257412369575373)"],["withseq","with (sequential)","oklab(0.8888888888888888 0.03001690665504107 -0.020349852504867375)","oklab(0.1111111111111111 0.030016906655041056 -0.020349852504867365)"]],"fns":{"<":[["<","compares two values via the < operator",[0],2]],">":[[">","compares two values via the > operator",[0],2]],"≤":[["≤","compares two values via the ≤ operator",[0],2]],"≥":[["≥","compares two values via the ≥ operator",[0],2]],"≮":[["≮","compares two values via the ≮ operator",[0],2]],"≯":[["≯","compares two values via the ≯ operator",[0],2]],"≰":[["≰","compares two values via the ≰ operator",[0],2]],"≱":[["≱","compares two values via the ≱ operator",[0],2]],"=":[["=","compares two values via the = operator",[0],2]],"≠":[["≠","compares two values via the ≠ operator",[0],2]],"valid":[["valid","returns true if a value is valid for the given type (whether a number is finite, whether a color is displayable, etc.)",[1,2,14],0]],"firstvalid":[["firstvalid","returns the first value which is valid for its type (the first finite number, the first color which is displayable, etc.)",[1],0]],"and":[["and","returns true if both inputs are true",[1,1],2]],"or":[["or","returns true if either of its inputs are true",[1,1],2]],"sign":[["sign","gets the sign of a number",[2,6],0]],"sgn":[["sign","gets the sign of a number",[2],0]],"ln":[["ln","takes the natural logarithm of a value",[2],0]],"log":[["log","takes the base-10 logarithm of a value",[2],0]],"log_":[["log with subscript","takes the logarithm of a value in some base",[2],0]],"exp":[["exp","raises e to some value",[2],0]],"unsign":[["unsign","takes the absolute value of the components of a value",[2,33],0]],"cmp":[["cmp","compares two numbers, returning -1, 0, or 1, depending on whether the first number is less than, equal to, or greater than the second number",[2],0]],"count":[["count","counts the size of a list",[2],0]],"point":[["point","constructs a point from multi-dimensional values",[3,6],0]],"screendistance":[["screendistance","calculates the distance between two points in terms of pixels on your screen, rather than graphpaper units",[3],0]],"debugpoint":[["debugpoint","given some point p, returns a color depending on which side of the currently active shader pixel that point p is on",[3],0]],".x":[[".x","gets the x-coordinate of a point",[3],0]],".y":[[".y","gets the y-coordinate of a point",[3],0]],"rgb":[["rgb","creates a color given its red, green, and blue components",[4],0]],"hsv":[["hsv","creates a color given its hue (0-360), saturation (0-1), and value (0-1)",[4],0]],"-":[["-","negates its input",[5],1],["-","subtracts two values",[5],2],["-","subtracts one value from another",[5],4]],"+":[["+","unary plus; ensures a numeric value is passed",[5],1],["+","adds two values or points",[5],2],["+","adds two values",[5],4]],"·":[["·","multiplies two values",[5],2]],"÷":[["÷","divides two values",[5],2]],"⊙":[["⊙","multiplies multi-dimensional values component-by-component",[5],2]],"mod":[["mod","modulus operator (remainder-like)",[5],2]],"×":[["×","multiplies two real numbers",[5],2]],"↑":[["↑","raises a value to an exponent",[5],2]],"arg":[["arg","returns the angle between a point and the x-axis",[6],0]],"conj":[["conj","takes the conjugate of a complex number or quaternion",[6,33],0]],"imag":[["imag","gets the imaginary part of a complex number",[6],0]],"real":[["real","gets the real part of a multi-dimensional number",[6,33],0]],"dot":[["dot","takes the dot product of two complex numbers",[6],0]],"complex":[["complex","converts a point into a complex number",[6],0]],".i":[[".i","gets the coefficient of 'i' in a multi-dimensional number",[6,33],0]],"cplot":[["cplot","gets the color a complex number would be represented by when performing domain coloring",[6],0]],"cplothue":[["cplothue","gets the hue a complex number would be represented by when performing domain coloring",[6],0]],"floor":[["floor","rounds down to the nearest integer",[7,34],0]],"ceil":[["ceil","rounds up to the nearest integer",[7,34],0]],"round":[["round","rounds to the nearest integer; ties are rounded up",[7,34],0]],"fract":[["fract","calculate x-floor(x), or the fractional part of x",[7,34],0]],"concat":[["concat","concatenates one or more string-like values into a string",[8],0]],"sin":[["sin","takes the sine of an angle",[9,42],0]],"cos":[["cos","takes the cosine of an angle",[9,42],0]],"tan":[["tan","takes the tangent of an angle",[9,42],0]],"csc":[["csc","takes the cosecant of an angle",[9,42],0]],"sec":[["sec","takes the secant of an angle",[9,42],0]],"cot":[["cot","takes the cotangent of an angle",[9,42],0]],"arcsin":[["arcsin","takes the inverse sine of a value",[9],0]],"arccos":[["arccos","takes the inverse cosine of a value",[9],0]],"arctan":[["arctan","takes the inverse tangent of a value",[9],0]],"arccsc":[["arccsc","takes the inverse cosecant of a value",[9],0]],"arcsec":[["arcsec","takes the inverse secant of a value",[9],0]],"arccot":[["arccot","takes the inverse cotangent of a value",[9],0]],"sin^-1":[["arcsin","takes the inverse sine of a value",[9],0]],"cos^-1":[["arccos","takes the inverse cosine of a value",[9],0]],"tan^-1":[["arctan","takes the inverse tangent of a value",[9],0]],"csc^-1":[["arccsc","takes the inverse cosecant of a value",[9],0]],"sec^-1":[["arcsec","takes the inverse secant of a value",[9],0]],"cot^-1":[["arccot","takes the inverse cotangent of a value",[9],0]],"arcsin^-1":[["sin","takes the sine of an angle",[9],0]],"arccos^-1":[["cos","takes the cosine of an angle",[9],0]],"arctan^-1":[["tan","takes the tangent of an angle",[9],0]],"arccsc^-1":[["csc","takes the cosecant of an angle",[9],0]],"arcsec^-1":[["sec","takes the secant of an angle",[9],0]],"arccot^-1":[["cot","takes the cotangent of an angle",[9],0]],".z":[[".z","gets the z-coordinate of a point",[10,11],0]],".w":[[".w","gets the w-coordinate of a point",[11],0]],"base":[["base","interprets numbers in <lhs> as if they were in base <rhs>",[12],4]],"eldiscoveredby":[["eldiscoveredby","gets the discoverer of an element",[13],0]],"elname":[["elname","gets the name of an element",[13],0]],"elappearance":[["elappearance","gets the appearance of an element",[13],0]],"elcategory":[["elcategory","gets the category of an element",[13],0]],"elnamedby":[["elnamedby","gets who named an element",[13],0]],"elphase":[["elphase","gets the phase of an element at STP",[13],0]],"eldescription":[["eldescription","gets a description of an element",[13],0]],"elsymbol":[["elsymbol","gets the symbol of an element",[13],0]],"elconfig":[["elconfig","gets the electron configuration of an element",[13],0]],"elconfigshort":[["elconfigshort","gets the electron configuration of an element using the noble gas shorthand",[13],0]],"elblock":[["elblock","gets the block an element is in on the periodic table",[13],0]],"mass":[["mass","gets the mass of an element",[13],0]],"elboil":[["elboil","boiling point of an element",[13],0]],"eleaffinity":[["eleaffinity","amount of energy released when an electron attaches to a neutral atom of this element",[13],0]],"elenegativity":[["elenegativity","tendency for an atom of an element to attract shared electrons in a chemical bond",[13],0]],"elmelt":[["elmelt","melting point of an element",[13],0]],"elmolarheat":[["elmolarheat","amount of energy required to increase the temperature of one mole of an element by one degree kelvin",[13],0]],"elnumber":[["elnumber","atomic number of an element",[13],0]],"elperiod":[["elperiod","period of an element in the periodic table",[13],0]],"element":[["element","returns the element with a given symbol",[13],7]],"oklab":[["oklab","creates a color given its lightness, green-red, and blue-yellow components",[14],0]],"oklch":[["oklch","creates a color given its lightness, chromaticity, and hue components",[14],0]],"lightdark":[["lightdark","if a single color is passed, it will be inverted in dark mode; if two arguments are passed, the first is used for light mode and the second for dark mode",[14],0]],".r":[[".r","gets the red component of a color",[14],0]],".g":[[".g","gets the green component of a color",[14],0]],".b":[[".b","gets the blue component of a color",[14],0]],".a":[[".a","gets the alpha component of a color",[14],0]],".":[[".","dotted function calls",[15],4]],"normaldist":[["normaldist","creates a normal distribution",[16],0]],"tdist":[["tdist","creates a t-distribution",[16],0]],"boltzmanndist":[["boltzmanndist","creates a Maxwell-Boltzmann distribution",[16],0]],"uniformdist":[["uniformdist","creates a uniform distribution",[16],0]],"poissondist":[["poissondist","creates a Poisson distribution",[16],0]],"binomialdist":[["binomialdist","creates a binomial distribution",[16],0]],"erf":[["erf","error function; related to area of a normal distribution",[16],0]],"erf^-1":[["erfinv","inverse error function",[16],0]],"faddeeva":[["faddeeva","scaled complex error function",[16],0]],"pdf":[["pdf","probability distribution function",[16],0]],"cdf":[["cdf","cumulative distribution function",[16],0]],"cdf^-1":[["inversecdf","computes a quantile of a data set or the inverse CDF of a distribution",[16],0]],"inversecdf":[["inversecdf","computes a quantile of a data set or the inverse CDF of a distribution",[16],0]],"join":[["join","joins multiple lists into a single one",[17],0]],"for":[["for","performs a list comprehension",[17],4]],"sort":[["sort","sorts the elements of a list",[18],0]],"unique":[["unique","removes any duplicate elements in a list",[18],0]],"min":[["min","returns the minimum of its inputs",[19],0]],"max":[["max","returns the maximum of its inputs",[19],0]],"total":[["total","returns the sum of its inputs",[19,20],0]],"mean":[["mean","takes the arithmetic mean of its inputs",[19],0]],"median":[["median","takes the median of its inputs",[19],0]],"quartile":[["quartile","computes a quartile of a data set",[19],0]],"quantile":[["quantile","computes a quantile of a data set or the inverse CDF of a distribution",[19],0]],"var":[["var","sample variance",[19],0]],"varp":[["varp","population variance",[19],0]],"stdev":[["stdev","sample standard deviation",[19],0]],"stdevp":[["stdevp","population standard deviation",[19],0]],"stddev":[["stdev","sample standard deviation",[19],0]],"stddevp":[["stdevp","population standard deviation",[19],0]],"mad":[["mad","mean absolute deviation",[19],0]],"cov":[["cov","sample covariance",[19],0]],"covp":[["covp","population covariance",[19],0]],"corr":[["corr","Pearson correlation coefficient",[19],0]],"stats":[["stats","computes a five-statistic summary",[19],0]],"ranks":[["ranks","computes the rank of each element of a list",[19],0]],"spearman":[["spearman","Spearman's rank correlation coefficient",[19],0]],"debugast":[["debugast","returns the AST of its input",[21],6]],"lngamma":[["lngamma","calculates the natural logarithm of the absolute value of the gamma function",[23],0]],"gamma":[["gamma","computes the gamma function",[23],0]],"center":[["center","gets the center of a circle",[24],0]],"circle":[["circle","constructs a circle from a center and radius",[24],0]],"distance":[["distance","calculates the distance between two objects",[24],0]],"end":[["end","gets the ending point of a vector",[24],0]],"glider":[["glider","constructs a point on an object",[24],0]],"intersection":[["intersection","constructs the point where two objects intersect",[24],0]],"line":[["line","constructs a line between two points",[24],0]],"midpoint":[["midpoint","constructs the midpoint of a line segment or between two points",[24],0]],"parallel":[["parallel","creates a line parallel to an existing line which passes through some point",[24],0]],"perpendicular":[["perpendicular","creates a line perpendicular to an existing line which passes through some point",[24],0]],"polygon":[["polygon","constructs a polygon from a set of points",[24],0]],"radius":[["radius","measures the radius of a circle",[24],0]],"ray":[["ray","constructs a ray (a line going in a particular direction)",[24],0]],"segment":[["segment","constructs a line segment",[24],0]],"segments":[["segments","gets the segments which make up a polygon",[24],0]],"start":[["start","gets the starting point of a vector",[24],0]],"vector":[["vector","constructs a vector between two points",[24],0]],"vertices":[["vertices","gets the vertices which make up a polygon",[24],0]],"angle":[["angle","constructs an angle from three vertices",[24],0]],"directed angle":[["directedangle","constructs an angle with a particular direction",[24],0]],"angles":[["angles","constructs an angle at every vertex of a polygon",[24],0]],"directed angles":[["directedangles","constructs a directed angle at every vertex of a polygon",[24],0]],"angle bisector":[["anglebisector","constucts the bisector of an angle",[24],0]],"perpendicular bisector":[["perpendicularbisector","constucts the perpendicular bisector of a line segment or between two points",[24],0]],"arc":[["arc","constructs an arc from three points",[24],0]],"length":[["length","calculates the length of an object",[24],0]],"translate":[["translate","translates an object by a vector",[24],0]],"rotate":[["rotate","rotates an object around a point by some angle",[24],0]],"dilate":[["dilate","scales an object from some point by some scaling factor",[24],0]],"reflect":[["reflect","reflects an object across a line",[24],0]],"perimeter":[["perimeter","measures the perimeter of a polygon",[24],0]],"image":[["image","draws an image on the graphpaper; pass a number to override the preferred aspect ratio",[25],0]],"imgwidth":[["imgwidth","gets the natural width of an image",[27],0]],"imgheight":[["imgheight","gets the natural height of an image",[27],0]],"imgaspect":[["imgaspect","gets the preferred aspect ratio of an image",[27],0]],"iterate":[["iterate","iterates a variable substitution",[31],5]],"ithkuil gloss":[["ithkuilgloss","glosses an ithkuil word",[32],0]],"ithkuil ungloss":[["ithkuilungloss","unglosses an ithkuil word",[32],0]],"ithkuil script":[["ithkuilscript","converts an ithkuil word into script form",[32],0]],"ithkuil values":[["ithkuilvalues","given the name of a grammatical category of ithkuil, returns all values it can take",[32],0]],"ithkuil valid":[["ithkuilvalid","checks if a consonant form is valid according to ithkuil phonotactics",[32],0]],"ithkuil valid initial":[["ithkuilvalidinitial","checks if a consonant form is valid word-initially according to ithkuil phonotactics",[32],0]],"ithkuil valid final":[["ithkuilvalidfinal","checks if a consonant form is valid word-finally according to ithkuil phonotactics",[32],0]],"ithkuil ca":[["ithkuilca","generates an ithkuil CA form, optionally geminated",[32],0]],".j":[[".j","gets the coefficient of 'j' in a quaternion",[33],0]],".k":[[".k","gets the coefficient of 'k' in a quaternion",[33],0]],"forceshader":[["forceshader","forces the given expression to be executed in a shader",[35],0]],"forcejs":[["forcejs","evaluates an expression outside a shader, then passes the value to the shader",[35],6]],"slopefield":[["slopefield","generates a slope or vector field",[37],6]],"zeta":[["zeta","computes the Riemann zeta function",[38],0]],"sym":[["sym","creates a symbolic expression",[41],6]],"unsym":[["unsym","interpolates a value into a symbolic expression",[41],6]],"eval":[["eval","evaluates a symbolic expression in the current evaluation context",[41],6]],"sinh":[["sinh","takes the hyperbolic sinhe of an angle",[43],0]],"cosh":[["cosh","takes the hyperbolic coshine of an angle",[43],0]],"tanh":[["tanh","takes the hyperbolic tanhgent of an angle",[43],0]],"csch":[["csch","takes the hyperbolic cosecant of an angle",[43],0]],"sech":[["sech","takes the hyperbolic secant of an angle",[43],0]],"coth":[["coth","takes the hyperbolic cotangent of an angle",[43],0]],"arsinh":[["arsinh","takes the inverse hyperbolic sine of a value",[43],0]],"arcosh":[["arcosh","takes the inverse hyperbolic cosine of a value",[43],0]],"artanh":[["artanh","takes the inverse hyperbolic tangent of a value",[43],0]],"arcsch":[["arcsch","takes the inverse hyperbolic cosecant of a value",[43],0]],"arsech":[["arsech","takes the inverse hyperbolic secant of a value",[43],0]],"arcoth":[["arcoth","takes the inverse hyperbolic cotangent of a value",[43],0]],"arcsinh":[["arsinh","takes the inverse hyperbolic sine of a value",[43],0]],"arccosh":[["arcosh","takes the inverse hyperbolic cosine of a value",[43],0]],"arctanh":[["artanh","takes the inverse hyperbolic tangent of a value",[43],0]],"arccsch":[["arcsch","takes the inverse hyperbolic cosecant of a value",[43],0]],"arcsech":[["arsech","takes the inverse hyperbolic secant of a value",[43],0]],"arccoth":[["arcoth","takes the inverse hyperbolic cotangent of a value",[43],0]],"sinh^-1":[["arsinh","takes the inverse hyperbolic sine of a value",[43],0]],"cosh^-1":[["arcosh","takes the inverse hyperbolic cosine of a value",[43],0]],"tanh^-1":[["artanh","takes the inverse hyperbolic tangent of a value",[43],0]],"csch^-1":[["arcsch","takes the inverse hyperbolic cosecant of a value",[43],0]],"sech^-1":[["arsech","takes the inverse hyperbolic secant of a value",[43],0]],"coth^-1":[["arcoth","takes the inverse hyperbolic cotangent of a value",[43],0]],"arsinh^-1":[["sinh","takes the hyperbolic sinhe of an angle",[43],0]],"arcosh^-1":[["cosh","takes the hyperbolic coshine of an angle",[43],0]],"artanh^-1":[["tanh","takes the hyperbolic tanhgent of an angle",[43],0]],"arcsch^-1":[["csch","takes the hyperbolic cosecant of an angle",[43],0]],"arsech^-1":[["sech","takes the hyperbolic secant of an angle",[43],0]],"arcoth^-1":[["coth","takes the hyperbolic cotangent of an angle",[43],0]],"arcsinh^-1":[["sinh","takes the hyperbolic sinhe of an angle",[43],0]],"arccosh^-1":[["cosh","takes the hyperbolic coshine of an angle",[43],0]],"arctanh^-1":[["tanh","takes the hyperbolic tanhgent of an angle",[43],0]],"arccsch^-1":[["csch","takes the hyperbolic cosecant of an angle",[43],0]],"arcsech^-1":[["sech","takes the hyperbolic secant of an angle",[43],0]],"arccoth^-1":[["coth","takes the hyperbolic cotangent of an angle",[43],0]],"intosi":[["intosi","converts a value to its component SI units",[45],0]],"in":[["in","converts values between units",[45],2]],"unit":[["unit","returns the unit with a given symbol",[45],7]],"with":[["with","substitutes variables simultaneously",[46],4]],"withseq":[["withseq","substitutes variables in sequence",[47],4]]}}
